name: Pipeline de prueba

on:
  pull_request:
    branches: [ "main" ]
  #push: 
    #branches: [ "main" ]

jobs:
  Linter:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with: 
        node-version: 18
    - name: Instalar dependencias
      run: npm install
    - name: Lint
      run: npm run lint

  Test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with: 
        node-version: 18
    - name: Instalar dependencias
      run: npm install
    - name: Test unitario
      run: npm run test

    - name: Notificar fallo de test unitario
      if: failure()  
      uses: slackapi/slack-github-action@v2.1.0
      with:
        webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
        webhook-type: incoming-webhook
        payload: |
          text: "El test unitario ha fallado :x: en el repositorio ${{ github.repository }} en la rama ${{ github.ref }} por ${{ github.actor }}."


  Start-Deploy:
    needs: [Linter, Test]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with: 
        node-version: 18
    - name: instalar dependencias
      run: npm install
    - name: deploy
      run: curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK }} 


  Wait-Deploy:
    runs-on: ubuntu-latest
    needs: [Start-Deploy]
    if: needs.Start-Deploy.result == 'success'
    steps:
      - name: Esperar a que Render termine el deploy
        run: |
          deploy_status="pending"
          while [ "$deploy_status" != "live" ]; do
            response=$(curl -s -H "Authorization: Bearer $RENDER_API_KEY" "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys")
            echo "Render API response: $response"
            deploy_status=$(echo $response | jq -r '.[0].deploy.status')
            echo "Current deploy status: $deploy_status"
            if [ "$deploy_status" == "failed" ]; then
              echo "Deployment failed."
              exit 1
            fi
            sleep 5
          done
          echo "Deployment completed successfully."
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}

      - name: Notificar fallo de deploy
        if: failure()  
        uses: slackapi/slack-github-action@v2.1.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
            text: "El deploy ha fallado :x: en el repositorio ${{ github.repository }} en la rama ${{ github.ref }} por ${{ github.actor }}."

      - name: Notificar exito de deploy
        if: success()  
        uses: slackapi/slack-github-action@v2.1.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
            text: "El deploy ha sido exitoso :white_check_mark: en el repositorio ${{ github.repository }} en la rama ${{ github.ref }} por ${{ github.actor }}."


      
  E2E_Test:
    needs: [Wait-Deploy]
    runs-on: ubuntu-latest
    if: needs.Wait-Deploy.result == 'success'
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with: 
        node-version: 18
    - name: Instalar dependencias
      run: npm install
    - name: Test de Cypress
      run: |
        npm run cypress:run

    - name: Notificar exito de test e2e
      if: success()  
      uses: slackapi/slack-github-action@v2.1.0
      with:
        webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
        webhook-type: incoming-webhook
        payload: |
          text: "El test e2e ha sido exitoso :white_check_mark: en el repositorio ${{ github.repository }} en la rama ${{ github.ref }} por ${{ github.actor }}."

    - name: Notificar fallo de test e2e
      if: failure()  
      uses: slackapi/slack-github-action@v2.1.0
      with:
        webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
        webhook-type: incoming-webhook
        payload: |
          text: "El test e2e ha fallado :x: en el repositorio ${{ github.repository }} en la rama ${{ github.ref }} por ${{ github.actor }}."
          